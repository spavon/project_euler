#!/usr/bin/env python3

#Each new term in the Fibonacci sequence is generated by adding the previous two terms.
#By starting with 1 and 2, the first 10 terms will be:
#1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#By considering the terms in the Fibonacci sequence whose values do not exceed four million
#find the sum of the even-valued terms.

def fib(n):
    if n <= 1:
        return(1)
    elif n == 2:
        return(2)
    else:
        n1 = 1
        n2 = 2
        n3 = 0
        for i in range(n-2):
            n3 = n1 + n2
            n1 = n2
            n2 = n3
        return(n3)

def get_fib_values_under(thresh):
    count = 1
    sums = {}
    while fib(count) < thresh:
        sums[count] = fib(count)
        count = count + 1
    return sums.values()

def find_evens_in_dict(n):
    evens = []
    for x in n:
        if x % 2 == 0:
            evens.append(x)
    return evens

def main():
    print(sum(find_evens_in_dict(get_fib_values_under(4000000))))

if __name__ == '__main__':
    main()
